# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ggfv59onhjORW4lNx-UqqcEC2lYi9U1G

**PF LAB ASSIGNMENT 2 - DICTIONARIES**

**NAME - MUHAMMAD FAISAL**

**REG NO - 210201009**

**QUESTION 1**
"""

print('Enter items and their prices.')
print('To stop type \'###\' and press \'Enter\'.')

item_list = {}
#Get data from user
while True:
	item = input('Item name: ').lower()
	if item == '###':#To stop recieving input
		break
	price = eval(input('Enter price: '))
	if item not in item_list:
		item_list[item] = price
	else:
		print('Item already exists.')

#Give data to user
print('\nEnter item name to know its price.')
print('To stop type \'###\' and press \'Enter\'.')
while True:
	item = input('Item name: ').lower()
	if item == '###':#To stop information exchange
		break
	if item in item_list:
		print('Price: ${:}'.format(item_list[item]))
	else:
		print('Item does not exist.')

"""**QUESTION 2**"""

print('Enter items and their prices.')
print('To stop type \'###\' and press \'Enter\'.')

item_list = {}
#Get data from user
while True:
	item = input('Item name: ').lower()
	if item == '###':#To stop recieving input
		break

	if item not in item_list:
		price = eval(input('Enter price: '))
		item_list[item] = price
	else:
		print('Item already exists.')

#Give data to user
amt = eval(input('\nEnter amount to list the items whose prices are less than entered amount: '))
l = len(str(int(amt)))
print('{:10s}{:}'.format('Item', 'Price'))
for i in item_list:
	if item_list[i] < amt:
		print('{:10s}${:{:}.2f}'.format(i, item_list[i], l+4))

"""**QUESTION 3**"""

days = {'January':31, 'February':28, 'March':31, 'April':30, 'May':31, 'June':30, 'July':31, 'August':31, 'September':30, 'October':31, 'November':30, 'December':31}

d  = input('a) Enter month name to know the number of days in it: ')
d = d[0].upper() + d[1:].lower()
if d in days:
	print('No. of days in the entered month is {:}.'.format(days[d]))
else:
	print('Month you entered doesn\'t exist.')

print('\nb) All the keys in alphabetical order:')
k = [i for i in days]# k = list(days)
k.sort()
print(k)

print('\nc) All the months with 31 days:')
d31 = [i for i in days if days[i] == 31]
print(d31)

print('\nd) Key-value pairs sorted by number of days:')
pairs = [(days[i], i) for i in days]
pairs.sort()
print(pairs)

d  = input('\ne) Enter month name to know the number of days in it: ')
d = d[0].upper() + d[1:3]
for d1 in days:
	if d in d1:
		print('No. of days in the month {:} is {:}.'.format(d1, days[d1]))
		break
else:
	print('Month you entered doesn\'t exist.')

"""**QUESTION 4**"""

credentials = {'Faisal':'Faisal123', 'Carlos':'Carlos456', 'Kieran':'Tierney', 'Takehiro':'Tomiyasu', 'Gabriel':'Magalhaes', 'Aaron':'Ramsdale', 'Granit':'Xhaka', 'Alexandre':'Lacazette', 'Emile':'Smith Rowe', 'Bukayo':'Saka'}

username = input('Enter username(Case-sensitive): ')
if username in credentials:
	password = input('Enter password(Case-sensitive): ')
	if password == credentials[username]:
		print('You are now logged in into the system.')
	else:
		print('Password is invalid.')
else:
	print('Not a valid user of the system.')

"""**QUESTION 5**"""

n = eval(input('Number of teams you want to add: '))
scoreboard = {}
#Getting data from user
while n:
	team_name = input('Enter team name: ').lower()
	if team_name in scoreboard:
		print('Team name already exists.')
	else:
		n -= 1
		team_wins = eval(input('Enter team\'s wins: '))
		team_loss = eval(input('Enter team\'s losses: '))
		scoreboard[team_name] = [team_wins, team_loss]

#Printing all data
print('\nScoreboard is as follows:')
print('{:15} {:4} {:4}'.format('Team name', 'Won', 'lost'))
print('-'*26)
for team in scoreboard:
	print('{:15} {:4} {:4}'.format(team, scoreboard[team][0], scoreboard[team][1]))
print('-'*26)

#Part a) of the question
print('\nPart (a):')
team_name = input('Enter team name to know it\'s winning percentage: ')
if team_name in scoreboard:
	print('The winning percentage of the team is {:}%.'.format(scoreboard[team_name][0]*100/sum(scoreboard[team_name])))
else:
	print('Team name not in the list.')

#Part b) of the question
print('\nPart (b):')
wins = [i[0] for i in list(scoreboard.values())]
print('List created with wins of each team:', wins)

#Part b) of the question
print('\nPart (c):')
score = eval(input('Enter winning criteria to consider is as a record: '))
print('\nScoreboard with winning records is as follows:')
print('{:15} {:4} {:4}'.format('Team name', 'Won', 'lost'))
print('-'*26)
for team in scoreboard:
	if score <= scoreboard[team][0]:
		print('{:15} {:4} {:4}'.format(team, scoreboard[team][0], scoreboard[team][1]))
print('-'*26)

"""**QUESTION 6**"""

print('Enter game scores(format: team1 score1 - team2 score2):')
print('When done entering, type \'#\' and press \'Enter\'')
string = ''
scoreboard = {}
while True:
	#Get user input and format as needed
	string = input('>> ').lower()
	if string[0] == '#':
		break
	l = string.split(' ')
	del l[2]
	l[1] = int(l[1])
	l[3] = int(l[3])

	for i in range(0, 4, 2):
		if l[i] in scoreboard:
			scoreboard[l[i]][0] += l[i+1] #Add winning score to an existing one
			scoreboard[l[i]][1] += l[(i+3)%4] #Add losing score to an existing one
		else:
			scoreboard[l[i]] = [l[i+1], l[(i+3)%4]] #Add winning score

print('{:14} {:5} {:5}'.format('Team name', 'Won', 'Lost'))
print('-'*26)
for team in scoreboard:
	print('{:14} {:5} {:5}'.format(team, scoreboard[team][0], scoreboard[team][1]))
print('-'*26)

"""**QUESTION 7**"""

from random import randint
from pprint import pprint

mat = [[randint(1, 9) for j in range(5)] for i in range(5)]
pprint(mat)

mat2 = [j for i in mat for j in i]

dict = {}
for i in range(1, 10):
	dict[i] = mat2.count(i)

print('Dictionary dict:', dict)
l = [(dict[i], i) for i in dict]
l.sort(reverse = True)

print('The 3 numbers that appeared most.')
for i in range(3):
	print('Key: {:}, Value: {:}'.format(l[i][1], l[i][0]))

"""**QUESTION 8**"""

from pprint import pprint
from random import shuffle, randint

deck = [{'value':i, 'suit':c} for c in ['spades', 'clubs', 'hearts', 'diamonds'] for i in range(2,15)]
print('Before shuffle:')
pprint(deck)
shuffle(deck)
print('-'*60)
print('After shuffle:')
pprint(deck)
print('-'*60)

for i in range(3):
	player1 = randint(0, 51)
	player2 = randint(0, 51)
	while player1 == player2:
		player2 = randint(0, 51)
	player1 = deck[player1]
	player2 = deck[player2]
	print('Player1\'s hand', player1)
	print('Player2\'s hand', player2)
	v = 'value'
	if player1[v] != player2[v]:
		if player1[v] > player2[v]:
			print('Player1 wins.')
		else:
			print('Player2 wins.')
		break
else:
	print('The game is draw.')

"""**QUESTION 9**"""

from pprint import pprint
from random import shuffle, randint

deck = [{'value':i, 'suit':c} for c in ['spades', 'clubs', 'hearts', 'diamonds'] for i in range(2,15)]
#print('Before shuffle:')
#pprint(deck)
shuffle(deck)
#print('-'*60)
#print('After shuffle:')
#pprint(deck)
#print('-'*60)

hand = [randint(0, 51)]
for i in range(1, 3):
	ind = randint(0, 51)
	hand.append(ind)
	while ind in hand[:i]: #Just to avoid repition of same card
		ind = randint(0, 51)
		hand[i] = ind

hand_value = []
hand_suit = []
for i in range(3):
	hand[i] = deck[hand[i]]
	hand_value.append(hand[i]['value'])
	hand_suit.append(hand[i]['suit'])

if hand_suit.count(hand_suit[0]) == 3:
	print('It is a flush!!!')
if hand_value.count(hand_value[0]) == 3:
	print('It is \'three of a kind\'!!')
else:
	if hand_value.count(hand_value[0]) == 2 or hand_value.count(hand_value[1]) == 2:
		print('It is a Pair!!')
hand_value.sort()
for i in range(hand_value[0],hand_value[0]+3):#(min(hand_value, max(hand_value)+1))
	if i not in hand_value:
		break
else:
	print('It is a stright!!')

print('The hand:')
for i in range(3):
	print('{:}. {:} of {:}'.format((i+1), hand[i]['value'], hand[i]['suit']))

"""**QUESTION 10**"""

from pprint import pprint
from random import shuffle, randint

deck = [{'value':i, 'suit':c} for c in ['spades', 'clubs', 'hearts', 'diamonds'] for i in range(2,15)]
#print('Before shuffle:')
#pprint(deck)
shuffle(deck)
#print('-'*60)
#print('After shuffle:')
#pprint(deck)
#print('-'*60)

flush = 0
three_of_a_kind = 0
pair = 0
straight = 0

count = 100
current = 0
while current < count:
	hand = [randint(0, 51)]
	for i in range(1, 3):
		ind = randint(0, 51)
		hand.append(ind)
		while ind in hand[:i]: #Just to avoid repition of same card
			ind = randint(0, 51)
			hand[i] = ind

	hand_value = []
	hand_suit = []
	for i in range(3):
		hand[i] = deck[hand[i]]
		hand_value.append(hand[i]['value'])
		hand_suit.append(hand[i]['suit'])

	if hand_suit.count(hand_suit[0]) == 3:
		flush += 1
		#print('It is a flush!!!')
	if hand_value.count(hand_value[0]) == 3:
		three_of_a_kind += 1
		#print('It is \'three of a kind\'!!')
	else:
		if hand_value.count(hand_value[0]) == 2 or hand_value.count(hand_value[1]) == 2:
			pair += 1
			#print('It is a Pair!!')
	hand_value.sort()
	for i in range(hand_value[0],hand_value[0]+3):#(min(hand_value, max(hand_value)+1))
		if i not in hand_value:
			break
	else:
		straight += 1
		#print('It is a stright!!')
	"""
	print('The hand:')
	for i in range(3):
		print('{:}. {:} of {:}'.format((i+1), hand[i]['value'], hand[i]['suit']))
	"""
	current += 1

print()
print('Flush appeared {:} times out of {:} trials and the probability is {:6.2f}.'.format(flush, count, flush*100/count))
print('three-of-a-kind appeared {:} times out of {:} trials and the probability is {:6.2f}.'.format(three_of_a_kind, count, three_of_a_kind*100/count))
print('Pair appeared {:} times out of {:} trials and the probability is {:6.2f}.'.format(pair, count, pair*100/count))
print('straight appeared {:} times out of {:} trials and the probability is {:6.2f}.'.format(straight, count, straight*100/count))

"""**QUESTION 11**"""

msg1 = {}

message1 = input('Enter message1: ')
message2 = input('Enter message2: ')

cipherable = 0
if len(message1) == len(message2):
	for i in range(len(message1)):
		if message1[i] in msg1:
			if msg1[message1[i]] != message2[i]:
				break
		else:
			if message1[i] == message2[i]:#To avoid a character mapping on to itself
				break
			if message2[i] in list(msg1.values()):#To avoid same character to map on to two different characters.
				break
			else:
				msg1[message1[i]] = message2[i]#Add new mapping to the dictionary.
	else:
		cipherable = 1

if cipherable:
	print('Yes, the messages can be encrypted with substitution cipher.')
else:
	print('No, the messages cannot be encrypted with substitution cipher.')

"""**QUESTION 12**"""

notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
notes_len = len(notes)
chord_dict = {'major': [0,4,7], 'minor': [0, 3, 7], 'augmented fifth': [0, 4, 8], 'minor fifth': [0, 4, 6], 'major sixth': [0, 4, 7, 9], 'minor sixth': [0, 3, 7, 9], 'dominant seventh': [0, 4, 7, 10], 'minor seventh': [0, 3, 7, 10], 'major seventh': [0, 4, 7, 11], 'diminished seventh': [0, 3, 6, 10]}
chords = list(chord_dict)

#Getting user input
key = input('Choose your musical key (options: {:}): '.format(notes)).upper()
if key in notes:#if the user eners key from available options ask for chord type and proceed.
	print('\nChoose from the available chord types.')
	print('{:20}{:6}'.format('Chord type', 'Choice'))
	print('-'*30)
	for i in range(len(chords)):
		print('{:20}{:^6}'.format(chords[i], i))
	print('-'*30)
	chord_type = eval(input('Your choice: '))%len(chords)
	print('You chose \'{:} {:}\'.'.format(key, chords[chord_type]))

	print('\nThe notes are ')
	steps = chord_dict[chords[chord_type]]
	ind = notes.index(key)
	for i in range(len(steps)):
		print(notes[(ind + steps[i]) % notes_len], end = ' ')

	print()

else:#if the user doesn't enter right musical key
	print('Musical key you entered does not exist in our library.')

"""**QUESTION 13**"""

L = ['aabaabac', 'cabaabca', 'aaabbcba', 'aabacbab', 'acababba']

user_str = input('Enter your string: ').lower()
user_str_inds = []
if len(user_str) == len(L[0]):
	for i in range(len(user_str)):
		if user_str[i] != '*' and user_str[i].isalpha():
			user_str_inds.append(i)

	print('Possible strings are: ')
	for j in L:
		for i in user_str_inds:
			if j[i] != user_str[i]:
				break
		else:
			print(j)

else:
	print('No string of that length is available in library.')

"""**QUESTION 14**"""

d =[{'name':'Todd', 'phone':'555-1414', 'email':'todd@mail.net'},
{'name':'Helga', 'phone':'555-1618', 'email':'helga@mail.net'},
{'name':'Princess', 'phone':'555-3141', 'email':''},
{'name':'LJ', 'phone':'555-2718', 'email':'lj@mail.net'},
{'name':'John', 'phone':'555-1817', 'email':'john@mail.net'},
{'name':'Galga', 'phone':'555-1618', 'email':''},
{'name':'Prince', 'phone':'555-5691', 'email':''},
{'name':'DJ', 'phone':'555-3758', 'email':'dj@mail.net'}]

print('(a) All the users whose phone number ends in an 8:')
print('{:12}{:8}   {:22}'.format('Name', 'Phone', 'E-mail'))
print('-'*50)
for i in d:
	if i['phone'][-1] == '8':
		print('{:12}{:8}   {:22}'.format(i['name'], i['phone'], i['email']))
print('-'*50)

print('\n(b) All the users that don’t have an email address listed:')
print('{:12}{:8}'.format('Name', 'Phone'))
print('-'*25)
for i in d:
	if len(i['email']) == 0:
		print('{:12}{:8}'.format(i['name'], i['phone']))
print('-'*25)

"""**QUESTION 15**"""

print('Times zones in USA are based on Greenwich Mean Time (GMT) - 12:00pm')
print('EST --- Eastern Standard Time --- 07:00am')
print('CST --- Central Standard Time --- 06:00am')
print('MST --- Mountain Standard Time --- 05:00am')
print('PST --- Pacific Standard Time --- 04:00am')
print('AKST --- Alaska Standard Time --- 03:00am')
print('YST --- Yukon Standard Time --- 03:00am')
print('AHST --- Alaska-Hawaii Standard Time --- 02:00am')

zone_dict = {'eastern': 0, 'central': -1, 'mountain': -2, 'pacific': -3, 'alaska': -4, 'yukon': -4, 'alaksa-hawaii': -5}

time = input('\nEnter time (XX:XXxm): ').lower()
time2 = [int(time[:2]), int(time[3:5]), time[-2]]
if time2[2] != 'p':
	time2[2] = 'a'

if 60<= time2[0]*60 + time2[1] <=779:
	startZone = input('Enter a start zone: ').lower()
	if startZone in zone_dict:
		endZone = input('Enter end zone: ').lower()
		if endZone in zone_dict:
			diff = zone_dict[endZone] - zone_dict[startZone]

			print()
			#Converting to 24-hour time format for convenience
			mins = time2[1]
			if time2[2] == 'p':
				if time2[0] == 12:
					mins = time2[0] * 60 + mins
				else:
					mins = time2[0] * 60 + mins + 719
			else:
				if time2[0] != 12:
					mins = time2[0] * 60 + mins

			#Now let's find the time for end zone
			mins = mins + diff * 60
			if not 0 <= mins < 1440:
				mins %= 1440
			print('Time in new zone is ', end ='')
			if mins < 720:
				if mins < 60:
					print('{:}:{:}{:}m'.format('%.2d'%12, '%.2d'%mins, 'a'))
				else:
					print('{:}:{:}{:}m'.format('%.2d'%(mins//60), '%.2d'%time2[1], 'a'))
			else:
				mins = mins - 720
				if mins < 60:
					print('{:}:{:}{:}m'.format('%.2d'%12, '%.2d'%mins, 'p'))
				else:
					print('{:}:{:}{:}m'.format('%.2d'%(mins//60), '%.2d'%time2[1], 'p'))
		else:
			print('Entered zone not in the list.')
	else:
		print('Entered zone not in the list.')
else:
	print('Time entered is wrong.')

"""**QUESTION 16**"""

#rom_ord = {'I':1, 'IV':4, 'V':5, 'IX':9, 'X':10, 'XL':40, 'L':50, 'XC':90, 'C':100, 'CD':400, 'D':500, 'CM':900, 'M':1000}
rom_ord = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}

print('(a) Conversion from roman numerals to ordinary integers:')
r_num = input('Enter roman numeral: ').upper()

go = 1
for i in r_num:#To avoid illegal symbols in roman numeral
	if i not in 'MDCLXVI':
		go = 0
		break
for i in 'MDCLXVI':#to avoid repition of a character more than three times adjucently/contiguously
	if i*4 in r_num:
		go = 0
		break
if go:
	if len(r_num) > 1:#If there are more than one character in roman number
		r_list = []
		count = 0

		if r_num[:2] in rom_ord:#Check if neighbouring chars appear as in rom_ord
			r_list.append(rom_ord[r_num[:2]])
			count += 2
		else:#just append the value of first character
			r_list.append(rom_ord[r_num[0]])
			count += 1

		while count < len(r_num)-1:
			temp1 = r_num[count:count+2]
			if temp1 in rom_ord:#Check if neighbouring chars appear as in rom_ord
				if rom_ord[temp1] < max(r_list) or (rom_ord[r_num[count]] == max(r_list) and count == len(r_list)):#To avoid bigger valued charcter/pair to appear later in the string... For example 'MXCM'
					r_list.append(rom_ord[temp1])
					count += 2
				else:
					r_list.clear()
					break
			else:#just append the value of first character
				if rom_ord[r_num[count]] < max(r_list) or (rom_ord[r_num[count]] == max(r_list) and count == len(r_list)):
					r_list.append(rom_ord[r_num[count]])
					count += 1
				else:
					r_list.clear()
					break

		if sum(r_list) <= 0 or sum(r_list) > 3999:
			print('Not a valid Roman numeral.  :(')
		else:
			if len(r_num)-1 == count:
				if rom_ord[r_num[-1]] < max(r_list) or (rom_ord[r_num[-1]] == max(r_list) and count == len(r_list)):
					r_list.append(rom_ord[r_num[count]])
					print('Equivalent ordinary number is', sum(r_list))
				else:
					print('Not a valid Roman numeral.  :(')
			else:
				print('Equivalent ordinary number is', sum(r_list))
	else:#If there is only one character in roman number
		print('Equivalent ordinary number is', rom_ord[r_num])
else:
	print('Invalid characters in roman numeral/Invalid Roman numeral.')


print('\n(b) Conversion from ordinary integers to roman numeral:')
num = eval(input('Enter an integer(between 1 & 3999 inclusively): '))
if 0 < num < 4000:
	nr_list = []

	while num:
		m = 10 ** (len(str(num))-1)
		temp1 = int(str(num)[0]) * m
		if temp1:
			temp2 = 0
			for i in rom_ord:
				x = rom_ord[i]
				if x <= temp1:
					while temp2 < temp1:
						temp2 += x
						nr_list.append(i)
					if temp2 > temp1:
						temp2 -= x
						del nr_list[-1]
					if temp2 == temp1:
						break
			num -= temp1

	nr_num = ''.join(nr_list)
	print('Equivalent Roman number is', nr_num)
else:
	print('Idiot!!!!')